{"name": "Client.__init__", "docstring": null, "definition": "def __init__(\n        self,\n        client_id,\n        client_secret,\n        username,\n        api_key,\n        base_url=BASE_URL,\n        api_version=API_VERSION,\n        timeout=API_TIMEOUT,\n    ):"}
{"name": "Client.get_documents", "docstring": "Get list of documents\n:param query: Search term to search for a specific document by its content. These fields will be searched: external_id, category, vendor.name, notes, invoice_number, total and ocr_text.\n:param external_id:\tSearch for documents that match your custom identifier\n:param tag:\tSearch for documents with the specified tag\n:param created__gt:\tSearch for documents with a created date greater than this one. Format YYYY-MM-DD+HH:MM:SS. Don't send both created__gt and created__gte in a single request.\n:param created__gte: Search for documents with a created date greater than or equal to this one. Format YYYY-MM-DD+HH:MM:SS. Don't send both created__gt and created__gte in a single request.\n:param created__lt:\tSearch for documents with a created date greater than this one. Format YYYY-MM-DD+HH:MM:SS. Don't send both created__lt and created__lte in a single request.\n:param created__lte: Search for documents with a created date less than or equal to this one. Format YYYY-MM-DD+HH:MM:SS. Don't send both created__lt and created__lte in a single request.\n:param kwargs: Additional request parameters\n:return: List of previously processed documents", "definition": "def get_documents(\n        self,\n        q: Optional[str] = None,\n        external_id: Optional[str] = None,\n        tag: Optional[str] = None,\n        created_gt: Optional[str] = None,\n        created_gte: Optional[str] = None,\n        created_lt: Optional[str] = None,\n        created_lte: Optional[str] = None,\n        **kwargs: Dict,\n    ):"}
{"name": "Client.get_document", "docstring": "Retrieve document by ID\n:param document_id: ID of the document you'd like to retrieve\n:return: Data extracted from the Document", "definition": "def get_document(self, document_id):"}
{"name": "Client.process_document", "docstring": "Process a document and extract all the fields from it\n:param file_path: Path on disk to a file to submit for data extraction\n:param categories: List of categories Veryfi can use to categorize the document\n:param delete_after_processing: Delete this document from Veryfi after data has been extracted\n:param kwargs: Additional request parameters\n\n:return: Data extracted from the document", "definition": "def process_document(\n        self,\n        file_path: str,\n        categories: Optional[List] = None,\n        delete_after_processing: bool = False,\n        **kwargs: Dict,\n    ):"}
{"name": "Client.process_document_url", "docstring": "Process Document from url and extract all the fields from it.\n\n:param file_url: Required if file_urls isn't specified. Publicly accessible URL to a file, e.g. \"https://cdn.example.com/receipt.jpg\".\n:param file_urls: Required if file_url isn't specifies. List of publicly accessible URLs to multiple files, e.g. [\"https://cdn.example.com/receipt1.jpg\", \"https://cdn.example.com/receipt2.jpg\"]\n:param categories: List of categories to use when categorizing the document\n:param delete_after_processing: Delete this document from Veryfi after data has been extracted\n:param max_pages_to_process: When sending a long document to Veryfi for processing, this parameter controls how many pages of the document will be read and processed, starting from page 1.\n:param boost_mode: Flag that tells Veryfi whether boost mode should be enabled. When set to 1, Veryfi will skip data enrichment steps, but will process the document faster. Default value for this flag is 0\n:param external_id: Optional custom document identifier. Use this if you would like to assign your own ID to documents\n:param kwargs: Additional request parameters\n\n:return: Data extracted from the document.", "definition": "def process_document_url(\n        self,\n        file_url: Optional[str] = None,\n        categories: Optional[List[str]] = None,\n        delete_after_processing=False,\n        boost_mode: int = 0,\n        external_id: Optional[str] = None,\n        max_pages_to_process: Optional[int] = None,\n        file_urls: Optional[List[str]] = None,\n        **kwargs: Dict,\n    ) -> Dict:"}
{"name": "Client.process_w9_document_url", "docstring": "Process W9 Document from url and extract all the fields from it.\n\n:param file_url: Publicly accessible URL to a file, e.g. \"https://cdn.example.com/receipt.jpg\".\n:param file_name: Optional name of file, eg. receipt.jpg\n:param kwargs: Additional request parameters\n\n:return: Data extracted from the document.", "definition": "def process_w9_document_url(\n        self, file_url: str, file_name: Optional[str] = None, **kwargs: Dict\n    ) -> Dict:"}
{"name": "Client.process_w9_document", "docstring": "Process W9 Document from url and extract all the fields from it.\n\n:param file_path: Path on disk to a file to submit for data extraction\n:param file_name: Optional name of file, eg. receipt.jpg\n:param kwargs: Additional request parameters\n\n:return: Data extracted from the document.", "definition": "def process_w9_document(self, file_path: str, file_name: Optional[str] = None, **kwargs):"}
{"name": "Client.delete_document", "docstring": "Delete Document from Veryfi\n:param document_id: ID of the document you'd like to delete", "definition": "def delete_document(self, document_id):"}
{"name": "Client.update_document", "docstring": "Update data for a previously processed document, including almost any field like `vendor`, `date`, `notes` and etc.\n\n```veryfi_client.update_document(id, date=\"2021-01-01\", notes=\"look what I did\")```\n\n:param document_id: ID of the document you'd like to update\n:param kwargs: fields to update\n\n:return: A document json with updated fields, if fields are writable. Otherwise a document with unchanged fields.", "definition": "def update_document(self, document_id: int, **kwargs) -> Dict:"}
{"name": "Client.get_line_items", "docstring": "Retrieve all line items for a document.\n:param document_id: ID of the document you'd like to retrieve\n:return: List of line items extracted from the document", "definition": "def get_line_items(self, document_id):"}
{"name": "Client.get_line_item", "docstring": "Retrieve a line item for existing document by ID.\n:param document_id: ID of the document you'd like to retrieve\n:param line_item_id: ID of the line item you'd like to retrieve\n:return: Line item extracted from the document", "definition": "def get_line_item(self, document_id, line_item_id):"}
{"name": "Client.add_line_item", "docstring": "Add a new line item on an existing document.\n:param document_id: ID of the document you'd like to update\n:param payload: line item object to add\n:return: Added line item data", "definition": "def add_line_item(self, document_id: int, payload: Dict) -> Dict:"}
{"name": "Client.update_line_item", "docstring": "Update an existing line item on an existing document.\n:param document_id: ID of the document you'd like to update\n:param line_item_id: ID of the line item you'd like to update\n:param payload: line item object to update\n\n:return: Line item data with updated fields, if fields are writable. Otherwise line item data with unchanged fields.", "definition": "def update_line_item(self, document_id: int, line_item_id: int, payload: Dict) -> Dict:"}
{"name": "Client.delete_line_items", "docstring": "Delete all line items on an existing document.\n:param document_id: ID of the document you'd like to delete", "definition": "def delete_line_items(self, document_id):"}
{"name": "Client.delete_line_item", "docstring": "Delete an existing line item on an existing document.\n:param document_id: ID of the document you'd like to delete\n:param line_item_id: ID of the line item you'd like to delete", "definition": "def delete_line_item(self, document_id, line_item_id):"}
